{"version":3,"file":"canvas-color-tracker.js","sources":["../src/index.js"],"sourcesContent":["const MAX_COLORS = 0xffffff;\nconst MAX_COLORS_BRAVE = 0x1fffff;\n\n// Z-Order curve and Morton codes are used to map from 1d to 3d while preserving\n// locality. Then by reversing the order of bits in each channel, the color\n// space is traversed in a way that tends to keep colors spaced evenly away\n// from eachother. It's clear that if all the colors are adjacent, then collisions\n// due to anti-aliasing blending are more likely, what would be optimum is an\n// interesting question: \n// https://dsp.stackexchange.com/questions/74600/error-correcting-code-using-rgb-space-with-a-lookup-table\n\n// Morton code and decode:\n// http://johnsietsma.com/2019/12/05/morton-order-introduction/\n// https://fgiesen.wordpress.com/2009/12/13/decoding-morton-codes/\n\nconst part1By2 = (x) => {\n  x = x & 0x000003ff;               // x = ---- ---- ---- ---- ---- --98 7654 3210\n  x = (x ^ (x << 16)) & 0xff0000ff; // x = ---- --98 ---- ---- ---- ---- 7654 3210\n  x = (x ^ (x << 8)) & 0x0300f00f;  // x = ---- --98 ---- ---- 7654 ---- ---- 3210\n  x = (x ^ (x << 4)) & 0x030c30c3;  // x = ---- --98 ---- 76-- --54 ---- 32-- --10\n  x = (x ^ (x << 2)) & 0x09249249;  // x = ---- 9--8 --7- -6-- 5--4 --3- -2-- 1--0\n  return x;\n};\n\nconst compact1By2 = (x) => {\n  x = x & 0x09249249;               // x = ---- 9--8 --7- -6-- 5--4 --3- -2-- 1--0\n  x = (x ^ (x >> 2)) & 0x030c30c3;  // x = ---- --98 ---- 76-- --54 ---- 32-- --10\n  x = (x ^ (x >> 4)) & 0x0300f00f;  // x = ---- --98 ---- ---- 7654 ---- ---- 3210\n  x = (x ^ (x >> 8)) & 0xff0000ff;  // x = ---- --98 ---- ---- ---- ---- 7654 3210\n  x = (x ^ (x >> 16)) & 0x000003ff; // x = ---- ---- ---- ---- ---- --98 7654 3210\n  return x;\n};\n\nconst encodeMorton3 = (r, g, b) =>\n  (part1By2(r) << 2) + (part1By2(g) << 1) + part1By2(b);\n\nconst decodeMorton3 = (code) => ({\n  r: compact1By2(code >> 2),\n  g: compact1By2(code >> 1),\n  b: compact1By2(code),\n});\n\nconst reverseEightBits = (x) => {\n  x = ((x & 0xf0) >> 4) | ((x & 0x0f) << 4);\n  x = ((x & 0xcc) >> 2) | ((x & 0x33) << 2);\n  x = ((x & 0xaa) >> 1) | ((x & 0x55) << 1);\n  return x >>> 0;\n};\n\nconst hexColorToRgb = (hex) => {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? [\n        parseInt(result[1], 16),\n        parseInt(result[2], 16),\n        parseInt(result[3], 16),\n      ]\n    : null;\n};\n\nconst intToHexPair = (n) => n.toString(16).padStart(2, \"0\");\nconst reverseAndHex = (n) => intToHexPair(reverseEightBits(n));\n\nconst intToColor = (n) => {\n  const { r, g, b } = decodeMorton3(n);\n  return `#${reverseAndHex(r)}${reverseAndHex(g)}${reverseAndHex(b)}`;\n};\n\nconst rgbToInt = (r, g, b) => {\n  return encodeMorton3(\n    reverseEightBits(r),\n    reverseEightBits(g),\n    reverseEightBits(b)\n  );\n};\n\nexport default class {\n  constructor() {\n    // indexed objects for rgb lookup, position 0 reserved for background.\n    this.registry = [null];\n\n    this.maxColors = MAX_COLORS;\n    this.isBrave = false;\n\n    // Brave randomly will change the lowest bit of R, G, or B for context\n    // getImageData return values. This is a privacy protecting feature.\n    navigator.brave &&\n      navigator.brave.isBrave().then((res) => {\n        if (res) {\n          this.isBrave = true;\n          // The last bit of r, g, b is indexed last.\n          this.maxColors = MAX_COLORS_BRAVE;\n        }\n      });\n  }\n\n  register(obj) {\n    if (this.registry.length >= this.maxColors) {\n      return null; // Registry is full\n    }\n\n    const color = intToColor(this.registry.length);\n    this.registry.push(obj);\n    return color;\n  }\n\n  lookup(color) {\n    var [r, g, b] = typeof color === \"string\" ? hexColorToRgb(color) : color;\n    if (this.isBrave) {\n      // First bit could be fiddled, so zero it.\n      r = r & 0xfe;\n      g = g & 0xfe;\n      b = b & 0xfe;\n    }\n    return this.registry[rgbToInt(r, g, b)] ?? null;\n  }\n};\n"],"names":["MAX_COLORS","MAX_COLORS_BRAVE","part1By2","x","compact1By2","encodeMorton3","r","g","b","decodeMorton3","code","reverseEightBits","hexColorToRgb","hex","result","exec","parseInt","intToHexPair","n","toString","padStart","reverseAndHex","intToColor","rgbToInt","registry","maxColors","isBrave","navigator","brave","then","res","obj","length","color","push"],"mappings":"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"}